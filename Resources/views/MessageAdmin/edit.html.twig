{% extends 'SonataAdminBundle:CRUD:base_edit.html.twig' %}

{% block title %}
    {{ "title_edit"|trans({'%name%': admin.toString(object) }, 'SonataAdminBundle') }}
{% endblock %}


{% block sonata_tab_content %}
    <div class="col-md-12">
        <div class="box box-success">
            <div class="box-body">
                <div class="sonata-ba-collapsed-fields">
                    {% if object.parameters %}
                        <div class="form-group" id="message-parameters">
                            <label class="control-label">Parameters</label>
                            <div>
                                {% for parameter in object.parameters %}
                                    <a data-parameter="{{ parameter }}" href="#" title="Click to insert {{ parameter }} into textarea">
                                        {{ parameter }}
                                    </a>
                                    {{ loop.last ? '' : ',' }}
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                    {% for field in form.translations %}
                        {{ form_row(field) }}
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        (function() {
            var $, methods;
            $ = jQuery;
            methods = {
                insert: function(value) {
                    var after, before, o, pos;
                    o = this[0];
                    pos = methods['getCaretPosition'].apply(this);
                    before = o.value.substring(0, pos);
                    after = o.value.substring(pos, o.value.length);
                    $(o).val(before + value + after);
                    pos += value.length;
                    return methods['setCaretPosition'].apply(this, [pos]);
                },
                getCaretPosition: function() {
                    var caretPos, o, sel;
                    o = this[0];
                    caretPos = 0;
                    if (document.selection) {
                        o.focus();
                        sel = document.selection.createRange();
                        sel.moveStart('character', -o.value.length);
                        caretPos = sel.text.length;
                    } else if (o.selectionStart || o.selectionStart === '0') {
                        caretPos = o.selectionStart;
                    }
                    return caretPos;
                },
                setCaretPosition: function(pos) {
                    var f, o;
                    o = this[0];
                    if (o.setSelectionRange) {
                        o.focus();
                        return o.setSelectionRange(pos, pos);
                    } else if (o.createTextRange) {
                        f = function() {
                            return o.focus();
                        };
                        setTimeout(f, 10);
                        f = function(o, pos) {
                            var range;
                            range = o.createTextRange();
                            range.collapse(true);
                            range.moveEnd('character', pos);
                            range.moveStart('character', pos);
                            return range.select();
                        };
                        setTimeout("f(o, pos)", 20);
                        return pos;
                    }
                }
            };

            $.fn.atCaret = function(method) {
                if (methods[method]) {
                    return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
                } else if (typeof method === 'object' || !method) {
                    return methods.init.apply(this, arguments);
                } else {
                    return $.error('Method ' + method + ' does not exist on jQuery.atCaret');
                }
            };
        }).call(this);

        $(function () {
            var focused = null;
            var textareas = $('.box-body textarea');
            textareas.focus(function(){
                focused = $(this);
            });

            $('#message-parameters a').click(function () {
                if (focused) {
                    var event = document.createEvent('TextEvent');
                    var parameter = $(this).data('parameter');

                    if (event.initTextEvent) {
                        var pos = focused.atCaret('getCaretPosition');
                        event.initTextEvent('textInput', true, true, null, parameter);
                        focused.get(0).dispatchEvent(event);
                        focused.atCaret('setCaretPosition', pos + parameter.length);
                    }
                    else // for firefox
                    {
                        focused.atCaret('insert', parameter);
                        focused.trigger('change');
                    }
                }
                else {
                    textareas.each(function (i, e) {
                        window.setTimeout(function () {
                            $(e).effect("highlight", {}, 1000);
                        }, 700 * i);
                    });
                }
                return false;
            });
        });
    </script>
{% endblock %}
